# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise64"
  config.vm.box_url = "http://files.vagrantup.com/precise64.box"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 80, host: 8014

  config.vm.network :forwarded_port,
      guest: 22,
      host: 2014,
      id: "ssh",
      auto_correct: true

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.55.155"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  config.vm.synced_folder "../", "/var/www/vagrant", :nfs => true
  config.vm.synced_folder "/Users/virtustilus/Projects/xray/digisec-xray", "/var/www/xray", :nfs => true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true

     # Use VBoxManage to customize the VM. For example to change memory:
     vb.customize ["modifyvm", :id, "--memory", "800"]
     vb.customize ["modifyvm", :id, "--cpus", 2]
     vb.customize ["modifyvm", :id, "--name", "simpleVAGRANT"]
  end

  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with CFEngine. CFEngine Community packages are
  # automatically installed. For example, configure the host as a
  # policy server and optionally a policy file to run:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.am_policy_hub = true
  #   # cf.run_file = "motd.cf"
  # end
  #
  # You can also configure and bootstrap a client to an existing
  # policy server:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.policy_server_address = "10.0.2.15"
  # end

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file default.pp in the manifests_path directory.
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"

  config.vm.provision :shell do |shell|
      shell.inline = "

        apt-get update
        apt-get install python-software-properties -y

        apt-add-repository ppa:chris-lea/node.js -y
        add-apt-repository ppa:ondrej/php5 -y
        apt-get update

        apt-get install nginx -y
        apt-get install -y php5 php5-cli php5-common php5-mysql php5-gd php5-fpm php5-cgi php5-fpm php-pear php5-mcrypt php5-intl

        ### perl -i -p -e's///' /etc/default/varnish
        perl -i -p -e's/;?cgi\.fix_pathinfo=./cgi.fix_pathinfo=0/' /etc/php5/fpm/php.ini

        #xdebug
        apt-get install php5-xdebug
        rm -f /etc/php5/fpm/conf.d/zzz_xdebug.ini
        rm -f /etc/php5/cgi/conf.d/zzz_xdebug.ini
        rm -f /etc/php5/cli/conf.d/zzz_xdebug.ini
        rm -f /etc/php5/mods-available/zzz_xdebug.ini
        rm -f /etc/php5/mods-available/zzz_php.ini
        
        
        echo 'xdebug.default_enable = 1' >> /etc/php5/mods-available/zzz_xdebug.ini
        echo 'xdebug.remote_autostart = 1' >> /etc/php5/mods-available/zzz_xdebug.ini
        echo 'xdebug.remote_connect_back = 1' >> /etc/php5/mods-available/zzz_xdebug.ini
        echo 'xdebug.remote_enable = 1' >> /etc/php5/mods-available/zzz_xdebug.ini
        echo 'xdebug.remote_handler = \"dbgp\"' >> /etc/php5/mods-available/zzz_xdebug.ini
        echo 'xdebug.remote_port = 9000' >> /etc/php5/mods-available/zzz_xdebug.ini
        echo 'xdebug.remote_host = \"192.168.55.1\"' >> /etc/php5/mods-available/zzz_xdebug.ini
        echo 'xdebug.max_nesting_level = 350' >> /etc/php5/mods-available/zzz_xdebug.ini
        echo 'xdebug.idekey = \"PHPSTORM\"' >> /etc/php5/mods-available/zzz_xdebug.ini


        echo 'date.timezone = \"Europe/Paris\"' >> /etc/php5/mods-available/zzz_php.ini
        echo 'memory_limit = -1' >> /etc/php5/php5/mods-available/zzz_php.ini

        ln -s /etc/php5/mods-available/zzz_xdebug.ini /etc/php5/fpm/conf.d/
        ln -s /etc/php5/mods-available/zzz_xdebug.ini /etc/php5/cli/conf.d/
        ln -s /etc/php5/mods-available/zzz_xdebug.ini /etc/php5/cgi/conf.d/
        ln -s /etc/php5/mods-available/zzz_php.ini /etc/php5/cli/conf.d/
        ln -s /etc/php5/mods-available/zzz_php.ini /etc/php5/fpm/conf.d/
        ln -s /etc/php5/mods-available/zzz_php.ini /etc/php5/cgi/conf.d/

        service php5-fpm restart

        echo 'mysql-server-5.5 mysql-server/root_password_again password root' | debconf-set-selections
        echo 'mysql-server-5.5 mysql-server/root_password password root' | debconf-set-selections
        apt-get install -y mysql-server
        apt-get install -y mysql-client mysql-common

        echo 'create database project1' | mysql -u root --password=root
        echo 'create database xray' | mysql -u root --password=root

        cp /var/www/vagrant/vagrant/files/etc_nginx_sites/* /etc/nginx/sites-available/
        ln -s /etc/nginx/sites-available/* /etc/nginx/sites-enabled/
        service nginx restart

        apt-get install -y curl
        cd /home/vagrant && curl -sS https://getcomposer.org/installer | php
        mv /home/vagrant/composer.phar /usr/bin/composer

        apt-get install nodejs -y
        apt-get install npm -y

        npm install -g bower
        npm install -g less

        apt-get install -y libsqlite3-dev
        #mailcatcher
            #clear autoload #perl -i -p -e's/^.*exit.*$/exit 0/' /etc/rc.local && perl -i -p -e's/^.*mailcatcher.*$//' /etc/rc.local && perl -i -p -e's/^.*exit.*$|^.*mailcatcher.*$|(^\s*$)+$//' /etc/rc.local;
            #add autoload   #echo '/opt/vagrant_ruby/bin/mailcatcher --ip=0.0.0.0' >> /etc/rc.local && echo 'exit 0' >> /etc/rc.local

        #apcu ? apt-get install php-apc && php5enmod apc

        apt-get install git -y

        perl -i -p -e's/^export\s+PS1=.*$//' /home/vagrant/.bashrc
        echo \"export PS1='\\n\\[\\e[31;1m\\]CWD\\[\\e[0m\\]:\\[\\e[36;1m\\]\\w\\n\\[\\e[32;1m\\]\\@:\\u@\\h\\[\\e[0m\\]\\$ ' \" >> /home/vagrant/.bashrc

        #copy ssh key

        apt-get install zsh -y

        perl -i -p -e's/^;?listen.owner.*/listen.owner = www-data/' /etc/php5/fpm/pool.d/www.conf
        perl -i -p -e's/^;?listen.group.*/listen.group = www-data/' /etc/php5/fpm/pool.d/www.conf
        perl -i -p -e's/^;?listen.mode.*/listen.mode = 0660/' /etc/php5/fpm/pool.d/www.conf
        perl -i -p -e's/^listen\\s*=\\s*.+/listen = \\/var\\/run\\/php5-fpm.sock/' /etc/php5/fpm/pool.d/www.conf
        service php5-fpm restart

        #apt-get install openjdk-7-jre-headless -y
        #wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.1.1.deb
        #sudo dpkg -i elasticsearch-1.1.1.deb
      "
  end

end
